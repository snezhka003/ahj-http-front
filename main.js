!function(){"use strict";function t(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return new Promise(((e,i)=>{const{headers:s,data:r,responseType:n,method:a}=t,c="http://localhost:7070/",o=new URLSearchParams;for(const t in r)Object.prototype.hasOwnProperty.call(r,t)&&o.append(t,r[t]);const d=new XMLHttpRequest;"GET"===a?d.open("GET",`${c}?${o}`):d.open("POST",`${c}?${o}`);for(const t in s)Object.prototype.hasOwnProperty.call(s,t)&&d.setRequestHeader(t,s[t]);d.responseType=n,"GET"===a?d.send():d.send(o),d.addEventListener("load",(()=>{d.status>=200&&d.status<500?e(d.response):i(new Error(`Ошибка ${d.status}\n${d.statusText}`))}))}))}class e{constructor(t){this.parentWidget=t,this.ticket={}}static get ctrlId(){return{form:"edit-form",title:"form-title",name:"name",description:"description",ok:"button-ok",cancel:"button-cancel"}}static get markup(){return`\n      <form>\n        <label data-id="${this.ctrlId.title}">Добавить тикет</label>\n        <label>Краткое описание<input type="text" name="name" data-id="${this.ctrlId.name}" required></label>\n        <label>Подробное описание</label>\n        <textarea name="description" data-id="${this.ctrlId.description}" rows="3" required></textarea>\n        <div class="buttons">\n          <button class="help-desk-button" type="reset" data-id="${this.ctrlId.cancel}">Отмена</button>\n          <button class="help-desk-button" type="submit" data-id="${this.ctrlId.ok}">Ok</button>\n        </div>      \n      </form>\n    `}static get formSelector(){return`[data-widget=${this.ctrlId.form}]`}static get titleSelector(){return`[data-id=${this.ctrlId.title}]`}static get nameSelector(){return`[data-id=${this.ctrlId.name}]`}static get descriptionSelector(){return`[data-id=${this.ctrlId.description}]`}static get cancelSelector(){return`[data-id=${this.ctrlId.cancel}]`}static get okSelector(){return`[data-id=${this.ctrlId.ok}]`}bindToDOM(){this.container=document.createElement("div"),this.container.className="help-desk-modal-form",this.container.dataset.widget=this.constructor.ctrlId.form,this.container.innerHTML=this.constructor.markup,document.body.appendChild(this.container),this.form=this.container.querySelector("form"),this.title=this.form.querySelector(this.constructor.titleSelector),this.name=this.form.querySelector(this.constructor.nameSelector),this.description=this.form.querySelector(this.constructor.descriptionSelector),this.ok=this.form.querySelector(this.constructor.okSelector),this.form.addEventListener("submit",this.onSubmit.bind(this)),this.form.addEventListener("reset",this.onReset.bind(this)),this.ok.addEventListener("click",this.validation.bind(this))}async onSubmit(e){e.preventDefault();const i={data:{method:"createTicket",id:this.id,status:this.status,name:this.name.value,description:this.description.value},responseType:"json",method:"POST"};try{this.parentWidget.redraw(await t(i))}catch(t){alert(t)}this.onReset()}onReset(){this.container.classList.remove("modal-active")}validation(){this.name.value=this.name.value.trim(),this.description.value=this.description.value.trim()}async show(t){if(t){this.title.textContent="Изменить тикет",this.id=t.dataset.index;const e=t.querySelector(this.parentWidget.constructor.statusSelector);this.status="✓"===e.textContent?"true":"false";const i=t.querySelector(this.parentWidget.constructor.nameSelector);this.name.value=i.textContent,this.description.value=await this.parentWidget.constructor.getDescription(this.id)}else this.title.textContent="Добавить тикет",this.id="",this.status="",this.name.value="",this.description.value="";this.container.classList.add("modal-active")}}class i{constructor(t){this.parentWidget=t}static get ctrlId(){return{form:"delete-form",title:"form-title",cancel:"button-cancel",ok:"button-ok"}}static get markup(){return`\n      <form>\n        <label data-id="${this.ctrlId.title}">Удалить тикет</label>\n        <label>Вы уверены, что хотите удалить тикет? Это действие необратимо.</label>\n        <div class="buttons">\n          <button class="help-desk-button" type="reset" data-id="${this.ctrlId.cancel}">Отмена</button>\n          <button class="help-desk-button" type="submit" data-id="${this.ctrlId.ok}">Ok</button>\n        </div>      \n      </form>\n    `}static get formSelector(){return`[data-widget=${this.ctrlId.form}]`}static get titleSelector(){return`[data-id=${this.ctrlId.title}]`}static get cancelSelector(){return`[data-id=${this.ctrlId.cancel}]`}static get okSelector(){return`[data-id=${this.ctrlId.ok}]`}bindToDOM(){this.container=document.createElement("div"),this.container.className="help-desk-modal-form",this.container.dataset.widget=this.constructor.ctrlId.form,this.container.innerHTML=this.constructor.markup,document.body.appendChild(this.container),this.form=this.container.querySelector("form"),this.title=this.form.querySelector(this.constructor.titleSelector),this.form.addEventListener("submit",this.onSubmit.bind(this)),this.form.addEventListener("reset",this.onReset.bind(this))}async onSubmit(e){e.preventDefault();const i={data:{method:"deleteTicket",id:this.id},responseType:"json",method:"POST"};try{this.parentWidget.redraw(await t(i))}catch(t){alert(t)}this.onReset()}onReset(){this.container.classList.remove("modal-active")}show(t){this.id=t.dataset.index,this.container.classList.add("modal-active")}}new class{constructor(t){this.parentEl=t,this.productList=[]}static get ctrlId(){return{widget:"help-desk-widget",add:"button-add",tickets:"tickets",ticket:"ticket",status:"button-status",text:"text",name:"name",description:"description",created:"created",edit:"button-edit",delete:"button-delete"}}static get markup(){return`\n      <div class="header">\n        <button class="help-desk-button" data-id="${this.ctrlId.add}">Добавить тикет</button>\n      </div>\n      <div data-id="${this.ctrlId.tickets}">\n      </div>\n    `}static get widgetSelector(){return`[data-widget=${this.ctrlId.widget}]`}static get addSelector(){return`[data-id=${this.ctrlId.add}]`}static get ticketsSelector(){return`[data-id=${this.ctrlId.tickets}]`}static get ticketSelector(){return`[data-id=${this.ctrlId.ticket}]`}static get statusSelector(){return`[data-id=${this.ctrlId.status}]`}static get textSelector(){return`[data-id=${this.ctrlId.text}]`}static get nameSelector(){return`[data-id=${this.ctrlId.name}]`}static get descriptionSelector(){return`[data-id=${this.ctrlId.description}]`}static get createdSelector(){return`[data-id=${this.ctrlId.created}]`}static get editSelector(){return`[data-id=${this.ctrlId.edit}]`}static get deleteSelector(){return`[data-id=${this.ctrlId.delete}]`}async bindToDOM(){this.widget=document.createElement("div"),this.widget.dataset.widget=this.constructor.ctrlId.widget,this.widget.innerHTML=this.constructor.markup,this.parentEl.appendChild(this.widget),this.addButton=this.widget.querySelector(this.constructor.addSelector),this.tickets=this.widget.querySelector(this.constructor.ticketsSelector),this.deleteForm=new i(this),this.deleteForm.bindToDOM(),this.editForm=new e(this),this.editForm.bindToDOM(),this.addButton.addEventListener("click",this.onAddButtonClick.bind(this)),this.tickets.addEventListener("click",this.onTicketsClick.bind(this));const s={data:{method:"allTickets"},responseType:"json",method:"GET"};try{this.redraw(await t(s))}catch(t){alert(t)}}async onAddButtonClick(t){t.preventDefault(),await this.editForm.show()}async onTicketsClick(t){t.preventDefault();const e=t.target.closest(this.constructor.ticketSelector);switch(t.target.dataset.id){case this.constructor.ctrlId.status:await this.invertStatus(e);break;case this.constructor.ctrlId.edit:await this.editForm.show(e);break;case this.constructor.ctrlId.delete:this.deleteForm.show(e);break;default:await this.constructor.invertVisibleDescription(e)}}redraw(t){this.tickets.innerHTML=t.reduce(((t,e)=>{let{id:i,status:s,created:r}=e;return`\n      ${t}\n      <div data-id="${this.constructor.ctrlId.ticket}" data-index="${i}">\n        <button class="help-desk-ticket-button" data-id="${this.constructor.ctrlId.status}">${"true"===s?"&#x2713;":"&#x00A0;"}</button>\n        <div class="text" data-id="${this.constructor.ctrlId.text}">\n          <p data-id="${this.constructor.ctrlId.name}"></p>\n        </div>\n        <p data-id="${this.constructor.ctrlId.created}">${this.constructor.dateToString(r)}</p>\n        <button class="help-desk-ticket-button" data-id="${this.constructor.ctrlId.edit}">&#x270E;</button>\n        <button class="help-desk-ticket-button" data-id="${this.constructor.ctrlId.delete}">&#x2716;</button>\n      </div>\n    `}),""),this.tickets.querySelectorAll(this.constructor.nameSelector).forEach(((e,i)=>{e.textContent=t[i].name}))}static dateToString(t){const e=new Date(t);return`0${e.getDate()}.0${e.getMonth()+1}.0${e.getFullYear()%100} 0${e.getHours()}:0${e.getMinutes()}`.replace(/\d(\d{2})/g,"$1")}static async getDescription(e){const i={data:{method:"ticketById",id:e},responseType:"text",method:"GET"};try{return await t(i)}catch(t){return alert(t),null}}async invertStatus(e){const i=e.dataset.index,s=e.querySelector(this.constructor.statusSelector),r=e.querySelector(this.constructor.nameSelector),n={data:{method:"createTicket",id:i,status:"✓"===s.textContent?"false":"true",name:r.textContent,description:await this.constructor.getDescription(i)},responseType:"json",method:"POST"};try{this.redraw(await t(n))}catch(t){alert(t)}}static async invertVisibleDescription(t){const e=t.querySelector(this.textSelector);let i=t.querySelector(this.descriptionSelector);i?(e.removeChild(i),i=null):(i=document.createElement("p"),i.dataset.id=this.ctrlId.description,e.appendChild(i),i.textContent=await this.getDescription(t.dataset.index))}}(document.querySelector(".container")).bindToDOM()}();